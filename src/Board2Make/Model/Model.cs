using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Board2Make.Model
{
    class Model
    {
        public List<Board> boards{ get; private set; }       

        public void parseBoardsTxt(string boards_txt)
        {
            if (File.Exists(boards_txt))
            {
                RegistryKey key = Registry.CurrentUser.CreateSubKey("Software\\lunOptics\\Board2Make");
                key.SetValue("input", boards_txt);

                var content = new FileContent(boards_txt);
                if (!content.ParseError)
                {
                    boards = content.boards.Where(b => b.core.ToUpper() == "TEENSY3").ToList();
                }           
            }
        }        

        public string generateMakefile(Board board /* ,IEnumerable<Option> options*/)
        {
            if (board == null) return "ERROR";

            var ao = board.getAllOptions();

            StringBuilder mf = new StringBuilder();

            mf.Append("#*****************************************************************\n");
            mf.Append("# Generated by Board2Make (https://github.com/luni64/Board2Make)\n");
            mf.Append("#\n");
            mf.Append($"# {"Board",-18} {board.name}\n");
            board.optionSets.ForEach(o => mf.Append($"# {o.name,-18} {o.selectedOption.name}\n"));          
            mf.Append("#\n");
            mf.Append($"# {DateTime.Now.ToShortDateString()} {DateTime.Now.ToShortTimeString()}\n");
            mf.Append("#*****************************************************************\n\n");

            mf.Append(makeEntry("BOARD_ID   := ", "build.board", ao) + "\n");
            mf.Append($"\n");

            mf.Append(makeEntry("FLAGS_CPU  := ", "build.flags.cpu", ao) + "\n");
            mf.Append(makeEntry("FLAGS_OPT  := ", "build.flags.optimize", ao) + "\n");
            mf.Append(makeEntry("FLAGS_COM  := ", "build.flags.common", ao) + makeEntry(" ", "build.flags.dep", ao) + "\n");
            mf.Append(makeEntry("FLAGS_LSP  := ", "build.flags.ldspecs", ao) + "\n");

            mf.Append("\n");
            mf.Append(makeEntry("FLAGS_CPP  := ", "build.flags.cpp", ao) + "\n");
            mf.Append(makeEntry("FLAGS_C    := ", "build.flags.c", ao) + "\n");
            mf.Append(makeEntry("FLAGS_S    := ", "build.flags.S", ao) + "\n");
            mf.Append(makeEntry("FLAGS_LD   := ", "build.flags.ld", ao) + "\n");

            mf.Append("\n");
            mf.Append(makeEntry("LIBS       := ", "build.flags.libs", ao) + "\n");
            mf.Append(makeEntry("LD_SCRIPT  := ", "build.mcu", ao) + ".ld\n");

            mf.Append("\n");
            mf.Append(makeEntry("DEFINES    := ", "build.flags.defs", ao) + "\n");
            mf.Append("DEFINES    += ");
            mf.Append(makeEntry("-DF_CPU=", "build.fcpu", ao) + " " + makeEntry("-D", "build.usbtype", ao) + " " + makeEntry("-DLAYOUT_", "build.keylayout", ao) + "\n");

            mf.Append($"\n");
            mf.Append("CPP_FLAGS  := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_CPP)\n");
            mf.Append("C_FLAGS    := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_C)\n");
            mf.Append("S_FLAGS    := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_COM) $(DEFINES) $(FLAGS_S)\n");
            mf.Append("LD_FLAGS   := $(FLAGS_CPU) $(FLAGS_OPT) $(FLAGS_LSP) $(FLAGS_LD)\n");
            mf.Append("AR_FLAGS   := rcs\n");

            return mf.ToString();
        }

        string makeEntry(String txt, String key, Dictionary<String, String> options)
        {
            if (options.ContainsKey(key))
            {
                return $"{txt}{options[key]}";
            }
            else return "";
        }


        public Model(string boards_txt)
        {
            parseBoardsTxt(boards_txt);
        }
    }
}
